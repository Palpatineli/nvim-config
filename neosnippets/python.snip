snippet unpack
    st.unpack(${1:Format}, fp.read(st.calcsize($1))$2
# for qt
# connect
snippet con
    self.connect(${1:signal}, SIGNAL('${2:sigFunc}()'), ${3:slot}, SLOT('${4:slotFunc()}'))${5}
# widget class
snippet wcl
    class ${1:className}(QWidget):
        def __init__(self, parent=${2:parent}):
            QWidget.__init__(self, parent)
            ${3}
snippet doc
    """${1:doc}"""
    $2
snippet plt
options head
    import matplotlib.pyplot as plt
    ${1}
snippet np
options head
    import numpy as np
    ${1}
snippet tf
options head
    import tensorflow as tf
    ${1}
snippet header
    #!/usr/bin/env python
    def main():
        ${1:pass}

    if __name__ == '__main__':
        main()
snippet testheader
    #!/usr/bin/env python
    import unittest
    from sys import path as spath
    from os import path
    spath.insert(0, path.dirname(path.dirname(path.realpath(__file__))))
    import ${1:module}

    $0

    if __name__ == '__main__':
        unittest.main()
snippet pdb
    # debugging
    print(${1:var})
snippet ifmain
options head
    if __name__ == '__main__':
        ${1:main()}$0
snippet pylintHeader
alias pylint 
options head
    ## pylint: disable=C0103, C0111
snippet timing
options head
    from time import perf_counter
    old_time = perf_counter()
    ${0:loop}
    print("time used: ", perf_counter() - old_time)${1}

